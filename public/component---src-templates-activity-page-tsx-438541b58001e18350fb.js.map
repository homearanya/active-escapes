{"version":3,"sources":["webpack:///./src/components/featured-destination/featured-destination.tsx","webpack:///./src/components/by-destination/by-destination.tsx","webpack:///./src/templates/activity-page.tsx","webpack:///./src/components/activity-intro/activity-intro.tsx","webpack:///./src/components/social-sharer/social-sharer.tsx","webpack:///./src/components/breadcrumbs/breadcrumbs.tsx","webpack:///./src/components/banner-activity/banner-activity.tsx","webpack:///./src/components/taylor-made-card/taylor-made-card.tsx","webpack:///./src/components/featured-tour/featured-tour.tsx","webpack:///./src/components/featured-tours/featured-tours.tsx"],"names":["FeaturedDestination","data","destination","image","heading","subHeading","description","link","numberOfTours","destinationFilter","handleClick","navigate","state","activity","className","childImageSharp","alt","onClick","frontmatter","destinationName","processText","ByDestination","featuredDestinations","map","featuredDestination","key","code","ActivityPage","markdownRemark","meta","title","activityName","banner","intro","featuredToursSection","byDestinationSection","taylorMadeSection","tours","breadcrumbs","id","name","href","bannerData","heroImage","fluid","featuredTours","useMemo","edges","filter","node","find","e","featured","numberOfToursByDestination","reduce","acc","undefined","destinations","gridFeaturedTours","length","gridTaylorMadeSection","options","pageClassName","grid","activityFilter","style","paddingBottom","index","first","last","ActivityIntro","text","inset","paragraph","i","dangerouslySetInnerHTML","__html","src","publicURL","height","width","icon","bestSeason","locations","SocialSharer","siteUrl","tourLink","tourName","shortDescription","emailLink","fullUrl","socialSharers","facebook","twitter","linkedin","pinterest","target","rel","Breadcrumbs","to","BannerActivity","data-stellar-background-ratio","reducer","action","maxWidth","widths","totalMeasurements","type","payload","TaylorMadeCard","subTitle","descriptionInParagraphs","link2","useReducer","dispatch","updateWidths","div","clientWidth","console","log","ref","display","flex","FeaturedTour","subtitle","duration","slug","useStaticQuery","site","siteMetadata","activityListing","activities","cur","listing","FeaturedTours"],"mappings":"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","file":"component---src-templates-activity-page-tsx-438541b58001e18350fb.js","sourcesContent":["import React from 'react'\nimport { navigate } from 'gatsby'\n\nimport { ImageSharp, Reference } from '../../types'\nimport { processText } from '../../utils/helpers'\nimport Image from '../image'\n\nexport interface FeaturedDestinationData {\n  destination: Reference\n  image: ImageSharp\n  heading: string\n  subHeading: string\n  description: string\n  link: string\n}\n\ninterface FeaturedDestinationProps {\n  data: FeaturedDestinationData\n  numberOfTours: number\n  destinationFilter: string\n}\n\nconst FeaturedDestination = ({\n  data: { destination, image, heading, subHeading, description, link },\n  numberOfTours,\n  destinationFilter,\n}: FeaturedDestinationProps) => {\n  const handleClick = () => {\n    navigate(`${link}`, { state: { activity: destinationFilter } })\n  }\n  return (\n    <article className=\"col-xs-12 col-sm-6 col-md-4 article has-hover-s1\">\n      <div className=\"thumbnail\">\n        <div className=\"img-wrap\">\n          {image && image.childImageSharp ? (\n            <Image image={image} alt={heading} />\n          ) : null}\n        </div>\n        <h3 onClick={handleClick} className=\"small-space clickable\">\n          {heading}\n        </h3>\n        <span className=\"info\">{subHeading}</span>\n        <aside className=\"meta\">\n          <span className=\"country\">\n            <span className=\"icon-world\"></span>\n            {destination.frontmatter.destinationName}\n          </span>\n          <span className=\"activity\">\n            <span className=\"icon-acitivities\"> </span>\n            {`${numberOfTours} ${numberOfTours === 1 ? 'tour' : 'tours'}`}\n          </span>\n        </aside>\n        <p>{processText(description)}</p>\n        <span\n          onClick={handleClick}\n          className=\"btn btn-default featured-explore-button\"\n        >\n          explore\n        </span>\n      </div>\n    </article>\n  )\n}\nexport default FeaturedDestination\n","import React from 'react'\n\nimport FeaturedDestination, {\n  FeaturedDestinationData,\n} from '../featured-destination'\n\ninterface ByDestinationData {\n  heading: string\n  subHeading: string\n  featuredDestinations: {\n    featuredDestination: FeaturedDestinationData\n    activity: string\n    numberOfTours: number\n  }[]\n}\n\ninterface ByDestinationProps {\n  data: ByDestinationData\n}\n\nconst ByDestination = ({\n  data: { heading, subHeading, featuredDestinations },\n}: ByDestinationProps) => {\n  return (\n    <article className=\"content-block article-boxed featured-destinations\">\n      <div className=\"container\">\n        <header className=\"content-heading\">\n          {heading && <h2 className=\"main-heading\">{heading}</h2>}\n          {subHeading && <span className=\"main-subtitle\">{subHeading}</span>}\n          {/* {(heading || subHeading) && <div className=\"seperator\" />} */}\n        </header>\n        <div className=\"content-holder content-boxed\">\n          <div className=\"row db-3-col featured-destination-row\">\n            {featuredDestinations.map(\n              ({ featuredDestination, activity, numberOfTours }) => {\n                return (\n                  <FeaturedDestination\n                    key={featuredDestination.destination.frontmatter.code}\n                    data={featuredDestination}\n                    numberOfTours={numberOfTours}\n                    destinationFilter={activity}\n                  />\n                )\n              },\n            )}\n          </div>\n        </div>\n      </div>\n    </article>\n  )\n}\nexport default ByDestination\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\n\nimport { ImageSharp } from '../types'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport BannerActivity, {\n  BannerActivityData,\n} from '../components/banner-activity'\nimport ActivityIntro, { ActivityIntroData } from '../components/activity-intro'\nimport FeaturedTours from '../components/featured-tours'\nimport { FeaturedTourInterface } from '../components/featured-tour'\nimport ByDestination from '../components/by-destination'\nimport { FeaturedDestinationData } from '../components/featured-destination'\nimport RecentlyViews from '../components/recently-views'\nimport TaylorMadeCard, {\n  TaylorMadeCardInterface,\n} from '../components/taylor-made-card'\n\ninterface ActivityPageProps {\n  readonly data: PageQueryData\n}\n\nconst ActivityPage = ({\n  data: {\n    markdownRemark: {\n      frontmatter: {\n        meta: { title, description },\n        activityName,\n        code,\n        banner,\n        intro,\n        featuredToursSection,\n        byDestinationSection,\n        taylorMadeSection,\n      },\n    },\n    tours,\n  },\n}: ActivityPageProps) => {\n  const breadcrumbs: Breadcrumbs = [\n    { id: '1', name: 'home', href: '/' },\n    { id: '2', name: 'activity', href: '' },\n    { id: '3', name: activityName, href: '' },\n  ]\n  const bannerData: BannerActivityData = {\n    heading: banner.heading,\n    subHeading: banner.subHeading,\n    heroImage: banner.image.childImageSharp.fluid,\n    breadcrumbs,\n  }\n  const featuredTours = useMemo(\n    () =>\n      tours.edges\n        .filter(({ node }) => {\n          const activity = node.frontmatter.activity.find(\n            (e) => e.name.frontmatter.code === code,\n          )\n          return activity && activity.featured > 0\n        })\n        .map(({ node: { id, frontmatter } }) => ({ id, frontmatter })),\n    [tours],\n  )\n  const numberOfToursByDestination = byDestinationSection\n    ? useMemo(\n        () =>\n          tours.edges.reduce((acc, { node }) => {\n            const destination = node.frontmatter.destination.frontmatter.code\n            if (!acc[destination]) {\n              acc[destination] = 1\n            } else {\n              acc[destination]++\n            }\n            return acc\n          }, {}),\n        [tours],\n      )\n    : undefined\n  const destinations =\n    byDestinationSection && numberOfToursByDestination\n      ? useMemo(\n          () =>\n            byDestinationSection.destinations.map((destination) => ({\n              featuredDestination: destination,\n              activity: code,\n              numberOfTours:\n                numberOfToursByDestination[\n                  destination.destination.frontmatter.code\n                ],\n            })),\n          [numberOfToursByDestination, byDestinationSection, code],\n        )\n      : undefined\n\n  let gridFeaturedTours = ''\n  if (featuredTours.length !== 3 && featuredTours.length < 5) {\n    gridFeaturedTours = 'grid-2'\n  }\n  let gridTaylorMadeSection = ''\n  if (taylorMadeSection && taylorMadeSection.options.length > 2) {\n    gridTaylorMadeSection = 'grid-2'\n  }\n  return (\n    <Layout pageClassName=\"activity-page\">\n      <SEO title={title} description={description} />\n      <BannerActivity data={bannerData} />\n      <ActivityIntro data={intro} />\n      <FeaturedTours\n        data={{\n          heading: featuredToursSection.heading,\n          subHeading: featuredToursSection.subHeading,\n          grid: gridFeaturedTours,\n          activityFilter: code,\n          featuredTours,\n        }}\n        style={\n          taylorMadeSection && taylorMadeSection.options.length > 0\n            ? { paddingBottom: 0 }\n            : {}\n        }\n      />\n      {byDestinationSection && (\n        <ByDestination\n          data={{\n            heading: byDestinationSection.heading,\n            subHeading: byDestinationSection.subHeading,\n            featuredDestinations: destinations ? destinations : [],\n          }}\n        />\n      )}\n      {taylorMadeSection && taylorMadeSection.options.length > 0 && (\n        <article\n          className={`activity-page__taylor-made-section content-block article-boxed`}\n        >\n          <div className=\"container\">\n            <header className=\"content-heading\">\n              <h2 className=\"main-heading\">{taylorMadeSection.heading}</h2>\n              <span className=\"main-subtitle\">\n                {taylorMadeSection.subHeading}\n              </span>\n              {/* <div className=\"seperator\" /> */}\n            </header>\n            <div\n              className={`activity-page__taylor-made-wrapper${\n                gridTaylorMadeSection ? ` ${gridTaylorMadeSection}` : ''\n              }`}\n            >\n              {taylorMadeSection.options.map((data, index) => (\n                <TaylorMadeCard\n                  key={index}\n                  data={data}\n                  first={index === 0}\n                  last={index === taylorMadeSection.options.length - 1}\n                />\n              ))}\n            </div>\n          </div>\n        </article>\n      )}\n      <RecentlyViews />\n    </Layout>\n  )\n}\n\nexport default ActivityPage\n\ninterface PageQueryData {\n  markdownRemark: {\n    frontmatter: {\n      meta: {\n        title: string\n        description: string\n      }\n      activityName: string\n      code: string\n      banner: {\n        heading: string\n        subHeading: string\n        image: ImageSharp\n      }\n      intro: ActivityIntroData\n      featuredToursSection: {\n        heading: string\n        subHeading: string\n      }\n      byDestinationSection: {\n        heading: string\n        subHeading: string\n        destinations: FeaturedDestinationData[]\n      }\n      taylorMadeSection: {\n        heading: string\n        subHeading: string\n        options: TaylorMadeCardInterface[]\n      }\n    }\n  }\n  tours: {\n    edges: {\n      node: {\n        id: string\n        frontmatter: FeaturedTourInterface\n      }\n    }[]\n  }\n}\n\nexport const query = graphql`\n  query ActivityPage($id: String!, $activity: String!) {\n    markdownRemark(id: { eq: $id }) {\n      id\n      frontmatter {\n        meta {\n          title\n          description\n        }\n        activityName\n        code\n        banner {\n          heading\n          subHeading\n          image {\n            childImageSharp {\n              fluid(maxWidth: 1920) {\n                ...GatsbyImageSharpFluid_withWebp\n              }\n            }\n            publicURL\n          }\n        }\n        intro {\n          heading\n          text\n          inset {\n            bestSeason\n            locations\n            image {\n              publicURL\n            }\n            icon\n          }\n          link {\n            href\n            text\n          }\n        }\n        featuredToursSection {\n          heading\n          subHeading\n        }\n        byDestinationSection {\n          heading\n          subHeading\n          destinations {\n            destination {\n              frontmatter {\n                code\n                destinationName\n              }\n            }\n            image {\n              childImageSharp {\n                fluid(maxWidth: 500, maxHeight: 291, quality: 70) {\n                  ...GatsbyImageSharpFluid_withWebp\n                }\n              }\n              publicURL\n            }\n            heading\n            subHeading\n            description\n            link\n          }\n        }\n        taylorMadeSection {\n          heading\n          subHeading\n          options {\n            image {\n              childImageSharp {\n                fluid(maxWidth: 500, maxHeight: 291, quality: 70) {\n                  ...GatsbyImageSharpFluid_withWebp\n                }\n              }\n              publicURL\n            }\n            title\n            subTitle\n            description\n            link {\n              href\n              text\n            }\n          }\n        }\n      }\n    }\n    tours: allMarkdownRemark(\n      filter: {\n        frontmatter: {\n          templateKey: { eq: \"tour-page\" }\n          activity: {\n            elemMatch: { name: { frontmatter: { code: { eq: $activity } } } }\n          }\n        }\n      }\n      sort: { fields: [frontmatter___activity___featured], order: ASC }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            meta {\n              description\n            }\n            slug\n            tourName\n            duration\n            destination {\n              frontmatter {\n                code\n                destinationName\n              }\n            }\n            activity {\n              name {\n                frontmatter {\n                  code\n                  activityName\n                }\n              }\n              featured\n              listing {\n                title\n                subtitle\n                tagline\n                image {\n                  childImageSharp {\n                    fluid(maxWidth: 500, maxHeight: 291, quality: 70) {\n                      ...GatsbyImageSharpFluid_withWebp\n                    }\n                  }\n                  publicURL\n                }\n                description\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport UniversalLink from '../universal-link'\n\nexport interface ActivityIntroData {\n  heading: string\n  text: string[]\n  inset: {\n    bestSeason: string\n    locations: string\n    image?: {\n      publicURL: string\n    }\n    icon?: string\n  }\n  link?: {\n    href: string\n    text: string\n  }\n}\n\ninterface ActiviyIntroProps {\n  data: ActivityIntroData\n  destination?: boolean\n}\n\nconst ActivityIntro = ({\n  data: { heading, text, inset, link },\n  destination = false,\n}: ActiviyIntroProps) => (\n  <div className=\"activity-intro content-intro\">\n    <div className=\"container\">\n      <div className=\"row activity-intro__row\">\n        <div className=\"col-sm-8 col-md-9 text-holder\">\n          <h2 className=\"title-heading\">{heading}</h2>\n          {text.map((paragraph, i) => (\n            <p key={i} dangerouslySetInnerHTML={{ __html: paragraph }} />\n          ))}\n          {link && link.href && link.text && (\n            <div className=\"btn-holder\">\n              <UniversalLink\n                href={link.href}\n                className=\"btn btn-info-sub btn-md btn-shadow radius\"\n              >\n                {link.text}\n              </UniversalLink>\n            </div>\n          )}\n        </div>\n        {inset && (\n          <div className=\"col-sm-4 col-md-3 map-col\">\n            <div className=\"holder\">\n              {!destination && (\n                <div className=\"map-holder\">\n                  {inset.image && (\n                    <img\n                      src={inset.image.publicURL}\n                      alt={heading}\n                      height=\"200\"\n                      width=\"200\"\n                    />\n                  )}\n                  {inset.icon && (\n                    <span className=\"info icon\">\n                      <span className={inset.icon} />\n                    </span>\n                  )}\n                </div>\n              )}\n              {(inset.bestSeason || inset.locations) && (\n                <div className=\"info\">\n                  {inset.bestSeason && (\n                    <div className=\"slot\">\n                      <strong>Best Season:</strong>{' '}\n                      <span className=\"sub\">{inset.bestSeason}</span>{' '}\n                    </div>\n                  )}\n                  {inset.locations && (\n                    <div className=\"slot\">\n                      <strong>Popular Locations:</strong>\n                      <span className=\"sub\">{inset.locations}</span>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  </div>\n)\n\nexport default ActivityIntro\n","import React from 'react'\n\nimport { socialSharers } from '../../utils/helpers'\n\nexport interface SocialSharerData {\n  siteUrl: string\n  tourLink: string\n  tourName: string\n  shortDescription: string\n  emailLink?: string\n}\ninterface SocialSharerProps {\n  data: SocialSharerData\n}\nconst SocialSharer = ({\n  data: { siteUrl, tourLink, tourName, shortDescription, emailLink },\n}: SocialSharerProps) => {\n  const fullUrl = `${siteUrl}${tourLink}`\n  const { facebook, twitter, linkedin, pinterest } = socialSharers(\n    fullUrl,\n    tourName,\n    shortDescription,\n  )\n\n  return (\n    <ul className=\"social-networks\">\n      <li>\n        <a href={twitter} target=\"_blank\" rel=\"noreferrer\">\n          <span className=\"icon-twitter\"></span>\n        </a>\n        <br />\n      </li>\n      <li>\n        <a href={facebook} target=\"_blank\" rel=\"noreferrer\">\n          <span className=\"icon-facebook\"></span>\n        </a>\n        <br />\n      </li>\n      <li>\n        <a href={linkedin} target=\"_blank\" rel=\"noreferrer\">\n          <span className=\"icon-linkedin\"></span>\n        </a>\n        <br />\n      </li>\n      <li>\n        <a href={pinterest} target=\"_blank\" rel=\"noreferrer\">\n          <span className=\"icon-pin\"></span>\n        </a>\n        <br />\n      </li>\n      {emailLink && (\n        <li className=\"social-networks__email\">\n          <a href={emailLink} rel=\"noreferrer\">\n            <span className=\"icon-email\"></span>\n          </a>\n          <br />\n        </li>\n      )}\n    </ul>\n  )\n}\nexport default SocialSharer\n","import React from 'react'\nimport { Link } from 'gatsby'\n\ninterface BreadcrumbsProps {\n  breadcrumbs: Breadcrumbs\n}\n\nconst Breadcrumbs = ({ breadcrumbs }: BreadcrumbsProps) => (\n  <nav className=\"breadcrumbs\">\n    <ul>\n      {breadcrumbs.map(({ id, name, href }) => (\n        <li key={id}>\n          {href ? <Link to={href}>{name}</Link> : <span>{name}</span>}\n        </li>\n      ))}\n    </ul>\n  </nav>\n)\nexport default Breadcrumbs\n","import React from 'react'\nimport Img, { FluidObject } from 'gatsby-image'\n\nimport Breadcrumbs from '../breadcrumbs'\n\nexport interface BannerActivityData {\n  heading: string\n  subHeading: string\n  breadcrumbs: Breadcrumbs\n  heroImage?: FluidObject | null\n}\n\ninterface BannerActivityProps {\n  data: BannerActivityData\n}\n\nconst BannerActivity = ({\n  data: { heading, subHeading, heroImage, breadcrumbs },\n}: BannerActivityProps) => (\n  <section\n    className=\"banner banner-inner parallax\"\n    data-stellar-background-ratio=\"0.5\"\n  >\n    {heroImage ? (\n      <div className=\"banner-image\">\n        <div className=\"has-overlay has-overlay-dark full-height\">\n          {heroImage && <Img fluid={heroImage} />}\n        </div>\n      </div>\n    ) : null}\n    <div className=\"banner-text\">\n      <div className=\"center-text text-center\">\n        <div className=\"container\">\n          <h1>{heading}</h1>\n          <strong className=\"subtitle\">{subHeading}</strong>\n          <Breadcrumbs breadcrumbs={breadcrumbs} />\n        </div>\n      </div>\n    </div>\n  </section>\n)\n\nexport default BannerActivity\n","import React, { useReducer } from 'react'\n\nimport { ImageSharp } from '../../types'\nimport { processText } from '../../utils/helpers'\nimport UniversalLink from '../universal-link'\nimport Image from '../image'\n\ninterface State {\n  maxWidth: number\n  widths: number[]\n  totalMeasurements: number\n}\n\ninterface Action {\n  type: string\n  payload: {\n    index: number\n    width: number\n  }\n}\nconst reducer = (state: State, action: Action) => {\n  const { maxWidth, widths, totalMeasurements } = state\n  const { type, payload } = action\n  const { index, width } = payload\n  switch (type) {\n    case 'add':\n      if (!widths[index] || width > widths[index]) {\n        widths[index] = width\n        return {\n          maxWidth: width > maxWidth ? width : maxWidth,\n          widths,\n          totalMeasurements: width ? totalMeasurements + 1 : totalMeasurements,\n        }\n      }\n      return state\n    default:\n      throw state\n  }\n}\n\nexport interface TaylorMadeCardInterface {\n  image: ImageSharp\n  title: string\n  subTitle?: string\n  description?: string\n  descriptionInParagraphs?: string[]\n  link?: {\n    href: string\n    text: string\n  }\n  link2?: {\n    href: string\n    text: string\n  }\n}\n\ninterface TaylorMadeCardProps {\n  data: TaylorMadeCardInterface\n  first: boolean\n  last: boolean\n}\n\nconst TaylorMadeCard = ({\n  data: {\n    image,\n    title,\n    subTitle,\n    description,\n    descriptionInParagraphs,\n    link,\n    link2,\n  },\n  first,\n  last,\n}: TaylorMadeCardProps) => {\n  const initialState: State = {\n    maxWidth: 0,\n    widths: [0, 0],\n    totalMeasurements: 0,\n  }\n\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const updateWidths = (index: number, div: HTMLDivElement) =>\n    div.clientWidth &&\n    div.clientWidth > state.widths[index] &&\n    dispatch({\n      type: 'add',\n      payload: { index, width: div.clientWidth },\n    })\n  console.log(state)\n  return (\n    <article\n      className={`taylor-made-card__wrapper${first ? ' first' : ''}${\n        last ? ' last' : ''\n      }`}\n    >\n      <div className=\"taylor-made-card__img-wrap\">\n        {image && image.childImageSharp ? (\n          <Image image={image} alt={title} />\n        ) : null}\n      </div>\n      <div className=\"taylor-made-card__textblock\">\n        {title && <h3 className=\"taylor-made-card__title\">{title}</h3>}\n        {subTitle && <p className=\"taylor-made-card__subTitle\">{subTitle}</p>}\n\n        {description && (\n          <p className=\"taylor-made-card__description\">\n            {processText(description)}\n          </p>\n        )}\n        {descriptionInParagraphs &&\n          descriptionInParagraphs.map((paragraph) => (\n            <p className=\"taylor-made-card__description\">\n              {processText(paragraph)}\n            </p>\n          ))}\n        <div className=\"taylor-made-card__buttons-wrapper\">\n          {link && (\n            <div\n              ref={(div) => div && updateWidths(0, div)}\n              style={\n                state.totalMeasurements >= 2\n                  ? { display: 'flex', width: `${state.maxWidth}px` }\n                  : {}\n              }\n            >\n              <UniversalLink\n                href={link.href}\n                className=\"btn btn-default featured-explore-button\"\n                style={{ flex: '1 0 auto' }}\n              >\n                {link.text}\n              </UniversalLink>\n            </div>\n          )}\n          {link2 && (\n            <div\n              ref={(div) => div && updateWidths(1, div)}\n              style={\n                state.totalMeasurements >= 2\n                  ? { display: 'flex', width: `${state.maxWidth}px` }\n                  : {}\n              }\n            >\n              <UniversalLink\n                href={link2.href}\n                className=\"btn btn-default featured-explore-button featured-explore-button--extra\"\n                style={{ flex: '1 0 auto' }}\n              >\n                {link2.text}\n              </UniversalLink>\n            </div>\n          )}\n        </div>\n      </div>\n    </article>\n  )\n}\nexport default TaylorMadeCard\n","import React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\n\nimport { ImageSharp, Reference } from '../../types'\nimport { processText } from '../../utils/helpers'\nimport SocialSharer from '../social-sharer'\nimport Image from '../image'\n\nexport interface FeaturedTourInterface {\n  meta: {\n    description: string\n  }\n  slug: string\n  tourName: string\n  duration?: string\n  destination: Reference\n  activity: {\n    name: Reference\n    featured: number\n    listing: {\n      title?: string\n      subtitle?: string\n      image: ImageSharp\n      description: string\n    }\n  }[]\n}\n\ninterface FeaturedTourProps {\n  data: FeaturedTourInterface\n  activityFilter: string\n}\n\nconst FeaturedTour = ({\n  data: { tourName, duration = '', slug, meta, destination, activity },\n  activityFilter,\n}: FeaturedTourProps) => {\n  const {\n    site: {\n      siteMetadata: { siteUrl },\n    },\n  } = useStaticQuery(graphql`\n    query FeaturedTours {\n      site {\n        siteMetadata {\n          siteUrl\n        }\n      }\n    }\n  `)\n  const tourLink = `/${destination.frontmatter.code}/${activity[0].name.frontmatter.code}/${slug}`\n  const activityListing = activity.find(\n    ({ name }) => name.frontmatter.code === activityFilter,\n  )\n  const activities = activity.reduce((acc, cur, i) => {\n    if (i === 0) {\n      return cur.name.frontmatter.activityName\n    } else {\n      return acc + ', ' + cur.name.frontmatter.activityName\n    }\n  }, '')\n  let image, title, subtitle, description\n  if (activityListing && activityListing.listing) {\n    image = activityListing.listing.image\n    title = activityListing.listing.title\n    subtitle = activityListing.listing.subtitle\n    description = activityListing.listing.description\n  }\n  return (\n    <article className=\"col-xs-12 col-sm-6 col-md-4 article has-hover-s1\">\n      <div className=\"thumbnail\">\n        <div className=\"img-wrap\">\n          {image && image.childImageSharp ? (\n            <Image image={image} alt={tourName} />\n          ) : null}\n        </div>\n        <h3 className=\"small-space\">\n          <Link to={tourLink}>{title || tourName}</Link>\n        </h3>\n        {subtitle && <span className=\"info\">{subtitle}</span>}\n        <aside className=\"meta\">\n          {duration && (\n            <span className=\"duration\">\n              <span className=\"ico-clock ux\"></span>\n              {duration}\n            </span>\n          )}\n          <span className=\"country\">\n            <span className=\"icon-world\"></span>\n            {destination.frontmatter.destinationName}\n          </span>\n          <span className=\"activity\">\n            <span className=\"icon-acitivities\"> </span>\n            {activities}\n          </span>\n        </aside>\n        <p>{processText(description)}</p>\n        <Link to={tourLink} className=\"btn btn-default featured-explore-button\">\n          explore\n        </Link>\n        <footer>\n          <SocialSharer\n            data={{\n              siteUrl,\n              tourLink,\n              tourName,\n              shortDescription: meta.description,\n            }}\n          />\n        </footer>\n      </div>\n    </article>\n  )\n}\nexport default FeaturedTour\n","import React from 'react'\n\nimport FeaturedTour, { FeaturedTourInterface } from '../featured-tour'\n\ninterface FeaturedToursData {\n  heading: string\n  subHeading: string\n  grid?: string\n  activityFilter: string\n  featuredTours: {\n    id: string\n    frontmatter: FeaturedTourInterface\n  }[]\n}\n\ninterface FeaturedToursProps {\n  data: FeaturedToursData\n  className?: string\n  style?: React.CSSProperties\n}\n\nconst FeaturedTours = ({\n  data: { heading, subHeading, grid = '', activityFilter, featuredTours },\n  className,\n  style,\n}: FeaturedToursProps) => {\n  return (\n    <article\n      className={`content-block article-boxed featured-tours${\n        className ? ` ${className}` : ''\n      }`}\n      style={style}\n    >\n      <div className=\"container\">\n        <header className=\"content-heading\">\n          <h2 className=\"main-heading\">{heading}</h2>\n          <span className=\"main-subtitle\">{subHeading}</span>\n          {/* <div className=\"seperator\" /> */}\n        </header>\n        <div className=\"content-holder content-boxed\">\n          <div\n            className={`row db-3-col featured-tour-row${\n              grid ? ` ${grid}` : ''\n            }`}\n          >\n            {featuredTours.map(({ id, frontmatter }) => {\n              return (\n                <FeaturedTour\n                  key={id}\n                  data={frontmatter}\n                  activityFilter={activityFilter}\n                />\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    </article>\n  )\n}\nexport default FeaturedTours\n"],"sourceRoot":""}
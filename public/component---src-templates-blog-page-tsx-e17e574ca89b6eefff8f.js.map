{"version":3,"sources":["webpack:///./src/components/banner-destination/banner-destination.tsx","webpack:///./src/components/social-sharer/social-sharer.tsx","webpack:///./src/components/breadcrumbs/breadcrumbs.tsx","webpack:///./src/components/blog-sidebar/recent-posts.tsx","webpack:///./src/components/blog-sidebar/tags.tsx","webpack:///./src/components/blog-sidebar/subscribe-form.tsx","webpack:///./src/components/blog-sidebar/blog-sidebar.tsx","webpack:///./src/templates/blog-page.tsx","webpack:///./src/components/post-thumbnail/post-thumbnail.tsx"],"names":["BannerDestination","data","heading","subHeading","heroImage","breadcrumbs","className","data-stellar-background-ratio","fluid","SocialSharer","siteUrl","tourLink","tourName","shortDescription","emailLink","fullUrl","socialSharers","facebook","twitter","linkedin","pinterest","href","target","rel","Breadcrumbs","map","id","name","key","to","RecentPosts","ref","useRef","height","useResizeObserver","edges","useStaticQuery","posts","useState","open","setOpen","onClick","role","style","node","frontmatter","slug","date","title","Tags","tags","Object","keys","tag","index","count","SubscribeForm","mailchimpMessage","setMailchimpMessage","first_name","last_name","email","first_nameabcdefgjk","last_nameabcdefgjk","emailabcdefgjk","formData","setFormData","handleChange","e","persist","prevFormData","value","console","log","onSubmit","preventDefault","axios","method","url","headers","then","result","catch","error","message","autoComplete","type","onChange","placeholder","required","BlogSidebar","BlogPage","site","siteMetadata","markdownRemark","meta","description","banner","postEdges","pageContext","bannerData","image","childImageSharp","postTitle","introduction","blogListingImage","allTags","PostThumbnail","postLink","alt","processText","length"],"mappings":"wLA0CeA,EA1BW,SAAC,GAAD,QACxBC,KAAQC,EADgB,EAChBA,QAASC,EADO,EACPA,WAAYC,EADL,EACKA,UAAWC,EADhB,EACgBA,YADhB,OAGxB,6BACEC,UAAU,+BACVC,gCAA8B,OAE7BH,EACC,yBAAKE,UAAU,gBACb,yBAAKA,UAAU,4CACZF,GAAa,kBAAC,IAAD,CAAKI,MAAOJ,MAG5B,KACJ,yBAAKE,UAAU,eACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,aACb,4BAAKJ,GACL,4BAAQI,UAAU,YAAYH,GAC9B,kBAAC,IAAD,CAAaE,YAAaA,U,yGC0BrBI,EA/CM,SAAC,GAEG,QADvBR,KAAQS,EACe,EADfA,QAASC,EACM,EADNA,SAAUC,EACJ,EADIA,SAAUC,EACd,EADcA,iBAAkBC,EAChC,EADgCA,UAEjDC,EAAU,GAAGL,EAAUC,EADN,EAE4BK,YACjDD,EACAH,EACAC,GAHMI,EAFe,EAEfA,SAAUC,EAFK,EAELA,QAASC,EAFJ,EAEIA,SAAUC,EAFd,EAEcA,UAMrC,OACE,wBAAId,UAAU,mBACZ,4BACE,uBAAGe,KAAMH,EAASI,OAAO,SAASC,IAAI,cACpC,0BAAMjB,UAAU,kBAElB,8BAEF,4BACE,uBAAGe,KAAMJ,EAAUK,OAAO,SAASC,IAAI,cACrC,0BAAMjB,UAAU,mBAElB,8BAEF,4BACE,uBAAGe,KAAMF,EAAUG,OAAO,SAASC,IAAI,cACrC,0BAAMjB,UAAU,mBAElB,8BAEF,4BACE,uBAAGe,KAAMD,EAAWE,OAAO,SAASC,IAAI,cACtC,0BAAMjB,UAAU,cAElB,8BAEDQ,GACC,wBAAIR,UAAU,0BACZ,uBAAGe,KAAMP,EAAWS,IAAI,cACtB,0BAAMjB,UAAU,gBAElB,iC,yGCrCKkB,EAXK,SAAC,GAAD,IAAGnB,EAAH,EAAGA,YAAH,OAClB,yBAAKC,UAAU,eACb,4BACGD,EAAYoB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMN,EAAb,EAAaA,KAAb,OACf,wBAAIO,IAAKF,GACNL,EAAO,kBAAC,OAAD,CAAMQ,GAAIR,GAAOM,GAAe,8BAAOA,W,8HCuD1CG,EA/DK,WAClB,IAAMC,EAAMC,iBAAuB,MAC3BC,EAAWC,IAAkB,CACnCH,QADME,OAIGE,EACPC,yBAAe,aADjBC,MAASF,MANa,EA2BAG,oBAAS,GAA1BC,EA3BiB,KA2BXC,EA3BW,KA4BxB,OACE,yBAAKlC,UAAU,gCACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,eACZ,uBACEA,UAAciC,EAAO,GAAK,YAC1BE,QAAS,kBAAMD,GAASD,KAF1B,kBAQJ,yBACEb,GAAG,YACHpB,UAAS,6BACToC,KAAK,WACLC,MAAOJ,GAAQN,EAAS,CAAEA,OAAWA,EAAS,GAAd,MAAyB,CAAEA,OAAQ,IAEnE,yBAAKF,IAAKA,EAAKzB,UAAU,cACvB,wBAAIA,UAAU,oCACX6B,EAAMV,KAAI,oBAAGmB,KAAQlB,EAAX,EAAWA,GAAImB,EAAf,EAAeA,YAAf,OACT,wBAAIjB,IAAKF,GACP,kBAAC,OAAD,CAAMG,GAAE,SAAWgB,EAAYC,KAAvB,KACN,8BAAOD,EAAYE,MACnB,0BAAMzC,UAAU,cAAcuC,EAAYG,iBCF7CC,EAzCF,SAAC,GAA6B,QAA3BC,YAA2B,MAApB,GAAoB,EACnCnB,EAAMC,iBAAuB,MAC3BC,EAAWC,IAAkB,CACnCH,QADME,OAFiC,EAKjBK,oBAAS,GAA1BC,EALkC,KAK5BC,EAL4B,KAMzC,OACE,yBAAKlC,UAAU,wBACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,eACZ,uBACEA,UAAciC,EAAO,GAAK,YAC1BE,QAAS,kBAAMD,GAASD,KAF1B,UAQJ,yBACEb,GAAG,YACHpB,UAAS,6BACToC,KAAK,WACLC,MAAOJ,GAAQN,EAAS,CAAEA,OAAWA,EAAS,GAAd,MAAyB,CAAEA,OAAQ,IAEnE,yBAAKF,IAAKA,EAAKzB,UAAU,cACvB,wBAAIA,UAAU,6CACX6C,OAAOC,KAAKF,GAAMzB,KAAI,SAAC4B,EAAKC,GAAN,OACrB,wBAAI1B,IAAK0B,GACP,kBAAC,OAAD,CAAMzB,GAAIqB,EAAKG,GAAKP,MAClB,0BAAMxC,UAAU,QAAQ+C,GACxB,0BAAM/C,UAAU,SAAS4C,EAAKG,GAAKE,iB,qBC6JtCC,EA3LO,WACpB,IAAMzB,EAAMC,iBAAuB,MAC3BC,EAAWC,IAAkB,CACnCH,QADME,OAFkB,EAKFK,oBAAS,GAA1BC,EALmB,KAKbC,EALa,OAMsBF,mBAAS,IAAlDmB,EANmB,KAMDC,EANC,OAOMpB,mBAAS,OAAD,UAhBf,CACzBqB,WAAY,GACZC,UAAW,GACXC,MAAO,GACPC,oBAAqB,GACrBC,mBAAoB,GACpBC,eAAgB,MAUTC,EAPmB,KAOTC,EAPS,KAWxBP,EAMEM,EANFN,WACAC,EAKEK,EALFL,UACAC,EAIEI,EAJFJ,MACAC,EAGEG,EAHFH,oBACAC,EAEEE,EAFFF,mBACAC,EACEC,EADFD,eA2BIG,EAAe,SAACC,GAGpB,OAFAV,EAAoB,IACpBU,EAAEC,UACMD,EAAE9C,OAAOK,MACf,IAAK,aACHuC,GAAY,SAACI,GAAD,wBACPA,EADO,CAEVX,WAAYS,EAAE9C,OAAOiD,WAEvB,MACF,IAAK,YACHL,GAAY,SAACI,GAAD,wBACPA,EADO,CAEVV,UAAWQ,EAAE9C,OAAOiD,WAEtB,MACF,IAAK,QACHL,GAAY,SAACI,GAAD,wBACPA,EADO,CAEVT,MAAOO,EAAE9C,OAAOiD,WAElB,MACF,IAAK,sBACHL,GAAY,SAACI,GAAD,wBACPA,EADO,CAEVR,oBAAqBM,EAAE9C,OAAOiD,WAEhC,MACF,IAAK,qBACHL,GAAY,SAACI,GAAD,wBACPA,EADO,CAEVP,mBAAoBK,EAAE9C,OAAOiD,WAE/B,MACF,IAAK,iBACHL,GAAY,SAACI,GAAD,wBACPA,EADO,CAEVN,eAAgBI,EAAE9C,OAAOiD,WAE3B,MACF,QACEC,QAAQC,IAAI,uCAIlB,OACE,yBAAKnE,UAAU,kCACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,eACZ,uBACEA,UAAciC,EAAO,GAAK,YAC1BE,QAAS,kBAAMD,GAASD,KAF1B,eAQJ,yBACEb,GAAG,YACHpB,UAAS,6BACToC,KAAK,WACLC,MAAOJ,GAAQN,EAAS,CAAEA,OAAWA,EAAS,GAAd,MAAyB,CAAEA,OAAQ,IAEnE,yBAAKF,IAAKA,EAAKzB,UAAU,cACvB,0BAAMA,UAAU,iBAAiBoE,SAxFpB,SAACN,GACpBA,EAAEO,iBACFjB,EAAoB,IAEhBC,GAAcC,GAAaC,GAG/Be,IAAM,CACJC,OAAQ,OACRC,IAAK,4CACLC,QAAS,CAAE,eAAgB,oBAC3B9E,KAAM,OAAF,UACCgE,KAGJe,MAAK,SAACC,GACLf,EA5CmB,CACzBP,WAAY,GACZC,UAAW,GACXC,MAAO,GACPC,oBAAqB,GACrBC,mBAAoB,GACpBC,eAAgB,KAuCVN,EAAoBuB,EAAOhF,SAE5BiF,OAAM,SAACC,GACNzB,EAAoByB,EAAMC,cAqErB,IAED,yBAAK9E,UAAU,YACb,2BACE+E,aAAa,eACb1D,KAAK,aACL2D,KAAK,OACLC,SAAUpB,EACVI,MAAOZ,IAET,2BACE0B,aAAa,eACb1D,KAAK,YACL2D,KAAK,OACLC,SAAUpB,EACVI,MAAOX,IAET,2BACEyB,aAAa,eACb1D,KAAK,QACL2D,KAAK,QACLC,SAAUpB,EACVI,MAAOV,KAIX,kCACE,yBAAKvD,UAAU,cACb,2BACEqB,KAAK,sBACL2D,KAAK,OACLC,SAAUpB,EACVI,MAAOT,EACPxD,UAAU,eACVkF,YAAY,aACZC,UAAQ,KAGZ,yBAAKnF,UAAU,cACb,2BACEqB,KAAK,qBACL2D,KAAK,OACLC,SAAUpB,EACVI,MAAOR,EACPzD,UAAU,eACVkF,YAAY,YACZC,UAAQ,KAGZ,yBAAKnF,UAAU,cACb,2BACEqB,KAAK,iBACL2D,KAAK,QACLC,SAAUpB,EACVI,MAAOP,EACP1D,UAAU,eACVkF,YAAY,gBACZC,UAAQ,KAGZ,yBAAKnF,UAAU,cACb,4BAAQgF,KAAK,SAAShF,UAAU,mBAAhC,aAGA,uBACEoB,GAAG,gBACHpB,UAAU,yDAETmD,UC1KJiC,EAdK,SAAC,GAAwB,IAAtBxC,EAAsB,EAAtBA,KACrB,OACE,2BAAOxB,GAAG,UAAUpB,UAAU,6BAC5B,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAM4C,KAAMA,IACZ,kBAAC,EAAD,W,kCCZV,4FAuFeyC,UA9DE,SAAC,GAcG,QAbnB1F,KAEoBS,EAWD,EAZjBkF,KACEC,aAAgBnF,QAWD,IATjBoF,eACEjD,YAQe,IAPbkD,KAAQ/C,EAOK,EAPLA,MAAOgD,EAOF,EAPEA,YACfC,EAMa,EANbA,OAGYC,EAGC,EAHjB7D,MAASF,MAEXgE,EACmB,EADnBA,YAMMC,EAAoC,CACxClG,QAAS+F,EAAO/F,QAChBC,WAAY8F,EAAO9F,WACnBC,UAAW6F,EAAOI,MAAMC,gBAAgB9F,MACxCH,YAR+B,CAC/B,CAAEqB,GAAI,IAAKC,KAAM,OAAQN,KAAM,KAC/B,CAAEK,GAAI,IAAKC,KAAM,OAAQN,KAAM,MASjC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK2B,MAAOA,EAAOgD,YAAaA,IAChC,kBAAC,IAAD,CAAmB/F,KAAMmG,IACzB,yBAAK9F,UAAU,oDACb,yBAAKA,UAAU,aACb,yBAAKoB,GAAG,cAAcpB,UAAU,OAC9B,yBAAKoB,GAAG,UAAUpB,UAAU,qBAC1B,yBAAKA,UAAU,eACb,yBAAKA,UAAU,uBACZ4F,EAAUzE,KAAI,oBAAGmB,KAAQlB,EAAX,EAAWA,GAAImB,EAAf,EAAeA,YAAf,OACb,kBAAC,IAAD,CACEjB,IAAKF,EACLzB,KAAM,CACJS,UACA6F,UAAW1D,EAAYG,MACvBF,KAAMD,EAAYC,KAClB0D,aAAc3D,EAAY2D,aAC1BzD,KAAMF,EAAYE,KAClBsD,MAAOxD,EAAY4D,iBAAiBJ,MACpCnD,KAAML,EAAYK,KAClBwD,QAASP,EAAYjD,cAOjC,kBAAC,IAAD,CAAaA,KAAMiD,EAAYjD,a,6ICJ5ByD,EApDO,SAAC,GAEG,QADxB1G,KAAQS,EACgB,EADhBA,QAAS6F,EACO,EADPA,UAAWzD,EACJ,EADIA,KAAMC,EACV,EADUA,KAAMyD,EAChB,EADgBA,aAAcH,EAC9B,EAD8BA,MAAOnD,EACrC,EADqCA,KAAMwD,EAC3C,EAD2CA,QAE7DE,EAAW,SAAS9D,EAAZ,IACd,OACE,6BAASxC,UAAU,wBACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,YACZ+F,GAASA,EAAMC,gBACd,kBAAC,OAAD,CAAMzE,GAAI+E,GACR,kBAAC,IAAD,CAAOP,MAAOA,EAAOQ,IAAKN,KAE1B,MAEN,yBAAKjG,UAAU,eACb,4BAAQA,UAAU,WAChB,4BACE,kBAAC,OAAD,CAAMuB,GAAI+E,GAAWL,IAEvB,0BAAMjG,UAAU,YAAYyC,IAE9B,2BAAI+D,YAAYN,IAChB,4BAAQlG,UAAU,QAChB,yBAAKA,UAAU,aACb,kBAAC,OAAD,CAAMuB,GAAI+E,GAAV,cAEF,kBAAC,IAAD,CACE3G,KAAM,CACJS,UACAC,SAAUiG,EACVhG,SAAU2F,EACV1F,iBAAkB2F,MAIxB,yBAAKlG,UAAU,mBACZ4C,EAAKzB,KAAI,SAAC4B,EAAKC,GAAN,OACR,0BAAM1B,IAAK0B,EAAOhD,UAAU,kBAC1B,kBAAC,OAAD,CAAMuB,GAAI6E,EAAQrD,GAAKP,MACrB,4BAAKO,IAENH,EAAK6D,OAAS,GAAKzD,EAAQJ,EAAK6D,OAAS,EACxC,uCACE","file":"component---src-templates-blog-page-tsx-e17e574ca89b6eefff8f.js","sourcesContent":["import React from 'react'\nimport Img, { FluidObject } from 'gatsby-image'\n\nimport Breadcrumbs from '../breadcrumbs'\n\nexport interface BannerDestinationData {\n  heading: string\n  subHeading: string\n  breadcrumbs: Breadcrumbs\n  heroImage?: FluidObject | null\n}\n\ninterface BannerDestinationProps {\n  data: BannerDestinationData\n}\n\nconst BannerDestination = ({\n  data: { heading, subHeading, heroImage, breadcrumbs },\n}: BannerDestinationProps) => (\n  <section\n    className=\"banner banner-inner parallax\"\n    data-stellar-background-ratio=\"0.5\"\n  >\n    {heroImage ? (\n      <div className=\"banner-image\">\n        <div className=\"has-overlay has-overlay-dark full-height\">\n          {heroImage && <Img fluid={heroImage} />}\n        </div>\n      </div>\n    ) : null}\n    <div className=\"banner-text\">\n      <div className=\"center-text\">\n        <div className=\"container\">\n          <h1>{heading}</h1>\n          <strong className=\"subtitle\">{subHeading}</strong>\n          <Breadcrumbs breadcrumbs={breadcrumbs} />\n        </div>\n      </div>\n    </div>\n  </section>\n)\n\nexport default BannerDestination\n","import React from 'react'\n\nimport { socialSharers } from '../../utils/helpers'\n\nexport interface SocialSharerData {\n  siteUrl: string\n  tourLink: string\n  tourName: string\n  shortDescription: string\n  emailLink?: string\n}\ninterface SocialSharerProps {\n  data: SocialSharerData\n}\nconst SocialSharer = ({\n  data: { siteUrl, tourLink, tourName, shortDescription, emailLink },\n}: SocialSharerProps) => {\n  const fullUrl = `${siteUrl}${tourLink}`\n  const { facebook, twitter, linkedin, pinterest } = socialSharers(\n    fullUrl,\n    tourName,\n    shortDescription,\n  )\n\n  return (\n    <ul className=\"social-networks\">\n      <li>\n        <a href={twitter} target=\"_blank\" rel=\"noreferrer\">\n          <span className=\"icon-twitter\"></span>\n        </a>\n        <br />\n      </li>\n      <li>\n        <a href={facebook} target=\"_blank\" rel=\"noreferrer\">\n          <span className=\"icon-facebook\"></span>\n        </a>\n        <br />\n      </li>\n      <li>\n        <a href={linkedin} target=\"_blank\" rel=\"noreferrer\">\n          <span className=\"icon-linkedin\"></span>\n        </a>\n        <br />\n      </li>\n      <li>\n        <a href={pinterest} target=\"_blank\" rel=\"noreferrer\">\n          <span className=\"icon-pin\"></span>\n        </a>\n        <br />\n      </li>\n      {emailLink && (\n        <li className=\"social-networks__email\">\n          <a href={emailLink} rel=\"noreferrer\">\n            <span className=\"icon-email\"></span>\n          </a>\n          <br />\n        </li>\n      )}\n    </ul>\n  )\n}\nexport default SocialSharer\n","import React from 'react'\nimport { Link } from 'gatsby'\n\ninterface BreadcrumbsProps {\n  breadcrumbs: Breadcrumbs\n}\n\nconst Breadcrumbs = ({ breadcrumbs }: BreadcrumbsProps) => (\n  <nav className=\"breadcrumbs\">\n    <ul>\n      {breadcrumbs.map(({ id, name, href }) => (\n        <li key={id}>\n          {href ? <Link to={href}>{name}</Link> : <span>{name}</span>}\n        </li>\n      ))}\n    </ul>\n  </nav>\n)\nexport default Breadcrumbs\n","import React, { useState, useRef } from 'react'\nimport { Link, graphql, useStaticQuery } from 'gatsby'\nimport useResizeObserver from 'use-resize-observer/polyfilled'\n\nconst RecentPosts = () => {\n  const ref = useRef<HTMLDivElement>(null)\n  const { height } = useResizeObserver({\n    ref,\n  })\n  const {\n    posts: { edges },\n  } = useStaticQuery(graphql`\n    query BlogSidebar {\n      posts: allMarkdownRemark(\n        filter: { frontmatter: { templateKey: { eq: \"post-page\" } } }\n        sort: { order: DESC, fields: [frontmatter___date] }\n        limit: 3\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              slug\n              date(formatString: \"MMM DD, YYYY\")\n            }\n          }\n        }\n      }\n    }\n  `)\n  const [open, setOpen] = useState(true)\n  return (\n    <div className=\"recent-posts accordion-group\">\n      <div className=\"panel-heading\">\n        <h4 className=\"panel-title\">\n          <a\n            className={`${open ? '' : 'collapsed'}`}\n            onClick={() => setOpen(!open)}\n          >\n            RECENT POSTS\n          </a>\n        </h4>\n      </div>\n      <div\n        id=\"collapse2\"\n        className={`panel-collapse collapse in`}\n        role=\"tabpanel\"\n        style={open && height ? { height: `${height + 60}px` } : { height: 0 }}\n      >\n        <div ref={ref} className=\"panel-body\">\n          <ul className=\"side-list post-list hovered-list\">\n            {edges.map(({ node: { id, frontmatter } }) => (\n              <li key={id}>\n                <Link to={`/blog/${frontmatter.slug}/`}>\n                  <time>{frontmatter.date}</time>\n                  <span className=\"text-block\">{frontmatter.title}</span>\n                </Link>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RecentPosts\n","import React, { useState, useRef } from 'react'\nimport { Link } from 'gatsby'\nimport useResizeObserver from 'use-resize-observer/polyfilled'\n\nexport interface TagsProps {\n  tags?: {\n    [key: string]: {\n      count: number\n      slug: string\n    }\n  }\n}\n\nconst Tags = ({ tags = {} }: TagsProps) => {\n  const ref = useRef<HTMLDivElement>(null)\n  const { height } = useResizeObserver({\n    ref,\n  })\n  const [open, setOpen] = useState(true)\n  return (\n    <div className=\"tags accordion-group\">\n      <div className=\"panel-heading\">\n        <h4 className=\"panel-title\">\n          <a\n            className={`${open ? '' : 'collapsed'}`}\n            onClick={() => setOpen(!open)}\n          >\n            TAGS\n          </a>\n        </h4>\n      </div>\n      <div\n        id=\"collapse1\"\n        className={`panel-collapse collapse in`}\n        role=\"tabpanel\"\n        style={open && height ? { height: `${height + 60}px` } : { height: 0 }}\n      >\n        <div ref={ref} className=\"panel-body\">\n          <ul className=\"side-list category-side-list hovered-list\">\n            {Object.keys(tags).map((tag, index) => (\n              <li key={index}>\n                <Link to={tags[tag].slug}>\n                  <span className=\"text\">{tag}</span>\n                  <span className=\"count\">{tags[tag].count}</span>\n                </Link>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Tags\n","import React, { useState, useRef } from 'react'\nimport axios from 'axios'\nimport useResizeObserver from 'use-resize-observer/polyfilled'\n\nconst resetFields = () => ({\n  first_name: '',\n  last_name: '',\n  email: '',\n  first_nameabcdefgjk: '',\n  last_nameabcdefgjk: '',\n  emailabcdefgjk: '',\n})\n\nconst SubscribeForm = () => {\n  const ref = useRef<HTMLDivElement>(null)\n  const { height } = useResizeObserver({\n    ref,\n  })\n  const [open, setOpen] = useState(true)\n  const [mailchimpMessage, setMailchimpMessage] = useState('')\n  const [formData, setFormData] = useState({\n    ...resetFields(),\n  })\n  const {\n    first_name,\n    last_name,\n    email,\n    first_nameabcdefgjk,\n    last_nameabcdefgjk,\n    emailabcdefgjk,\n  } = formData\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    setMailchimpMessage('')\n    // check honeypot fields\n    if (first_name || last_name || email) {\n      return\n    }\n    axios({\n      method: 'post',\n      url: `http://active-escapes.co.za/mailchimp.php`,\n      headers: { 'content-type': 'application/json' },\n      data: {\n        ...formData,\n      },\n    })\n      .then((result) => {\n        setFormData(resetFields())\n        setMailchimpMessage(result.data)\n      })\n      .catch((error) => {\n        setMailchimpMessage(error.message)\n      })\n  }\n\n  const handleChange = (e) => {\n    setMailchimpMessage('')\n    e.persist()\n    switch (e.target.name) {\n      case 'first_name':\n        setFormData((prevFormData) => ({\n          ...prevFormData,\n          first_name: e.target.value,\n        }))\n        break\n      case 'last_name':\n        setFormData((prevFormData) => ({\n          ...prevFormData,\n          last_name: e.target.value,\n        }))\n        break\n      case 'email':\n        setFormData((prevFormData) => ({\n          ...prevFormData,\n          email: e.target.value,\n        }))\n        break\n      case 'first_nameabcdefgjk':\n        setFormData((prevFormData) => ({\n          ...prevFormData,\n          first_nameabcdefgjk: e.target.value,\n        }))\n        break\n      case 'last_nameabcdefgjk':\n        setFormData((prevFormData) => ({\n          ...prevFormData,\n          last_nameabcdefgjk: e.target.value,\n        }))\n        break\n      case 'emailabcdefgjk':\n        setFormData((prevFormData) => ({\n          ...prevFormData,\n          emailabcdefgjk: e.target.value,\n        }))\n        break\n      default:\n        console.log('Wrong Case in Switch HandleChange')\n    }\n  }\n\n  return (\n    <div className=\"subscribe-form accordion-group\">\n      <div className=\"panel-heading\">\n        <h4 className=\"panel-title\">\n          <a\n            className={`${open ? '' : 'collapsed'}`}\n            onClick={() => setOpen(!open)}\n          >\n            SUBSCRIBE\n          </a>\n        </h4>\n      </div>\n      <div\n        id=\"collapse5\"\n        className={`panel-collapse collapse in`}\n        role=\"tabpanel\"\n        style={open && height ? { height: `${height + 60}px` } : { height: 0 }}\n      >\n        <div ref={ref} className=\"panel-body\">\n          <form className=\"subscribe-form\" onSubmit={handleSubmit}>\n            {' '}\n            {/* honeypot fields */}\n            <div className=\"honeypot\">\n              <input\n                autoComplete=\"new-password\"\n                name=\"first_name\"\n                type=\"text\"\n                onChange={handleChange}\n                value={first_name}\n              />\n              <input\n                autoComplete=\"new-password\"\n                name=\"last_name\"\n                type=\"text\"\n                onChange={handleChange}\n                value={last_name}\n              />\n              <input\n                autoComplete=\"new-password\"\n                name=\"email\"\n                type=\"email\"\n                onChange={handleChange}\n                value={email}\n              />\n            </div>\n            {/* real fields */}\n            <fieldset>\n              <div className=\"form-group\">\n                <input\n                  name=\"first_nameabcdefgjk\"\n                  type=\"text\"\n                  onChange={handleChange}\n                  value={first_nameabcdefgjk}\n                  className=\"form-control\"\n                  placeholder=\"First Name\"\n                  required\n                />\n              </div>\n              <div className=\"form-group\">\n                <input\n                  name=\"last_nameabcdefgjk\"\n                  type=\"text\"\n                  onChange={handleChange}\n                  value={last_nameabcdefgjk}\n                  className=\"form-control\"\n                  placeholder=\"Last Name\"\n                  required\n                />\n              </div>\n              <div className=\"form-group\">\n                <input\n                  name=\"emailabcdefgjk\"\n                  type=\"email\"\n                  onChange={handleChange}\n                  value={emailabcdefgjk}\n                  className=\"form-control\"\n                  placeholder=\"Email Address\"\n                  required\n                />\n              </div>\n              <div className=\"btn-holder\">\n                <button type=\"submit\" className=\"btn btn-default\">\n                  SUBSCRIBE\n                </button>\n                <p\n                  id=\"error_message\"\n                  className=\"contact-confirmation contact-confirmation--mailchimp3\"\n                >\n                  {mailchimpMessage}\n                </p>\n              </div>\n            </fieldset>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SubscribeForm\n","import React from 'react'\nimport RecentPosts from './recent-posts'\nimport Tags, { TagsProps } from './tags'\nimport SubscribeForm from './subscribe-form'\n\nconst BlogSidebar = ({ tags }: TagsProps) => {\n  return (\n    <aside id=\"sidebar\" className=\"col-sm-4 col-md-3 sidebar\">\n      <div className=\"sidebar-holder\">\n        <div className=\"accordion\">\n          <RecentPosts />\n          <Tags tags={tags} />\n          <SubscribeForm />\n        </div>\n      </div>\n    </aside>\n  )\n}\n\nexport default BlogSidebar\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport { ImageSharp } from '../types'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport BannerDestination, {\n  BannerDestinationData,\n} from '../components/banner-destination'\n\nimport PostThumbnail from '../components/post-thumbnail'\nimport BlogSidebar from '../components/blog-sidebar'\n\ninterface BlogPageProps {\n  readonly data: PageQueryData\n  readonly pageContext: {\n    id: string\n    tags: {\n      [key: string]: {\n        count: number\n        slug: string\n      }\n    }\n  }\n}\nconst BlogPage = ({\n  data: {\n    site: {\n      siteMetadata: { siteUrl },\n    },\n    markdownRemark: {\n      frontmatter: {\n        meta: { title, description },\n        banner,\n      },\n    },\n    posts: { edges: postEdges },\n  },\n  pageContext,\n}: BlogPageProps) => {\n  const breadcrumbs: Breadcrumbs = [\n    { id: '1', name: 'home', href: '/' },\n    { id: '2', name: 'Blog', href: '' },\n  ]\n  const bannerData: BannerDestinationData = {\n    heading: banner.heading,\n    subHeading: banner.subHeading,\n    heroImage: banner.image.childImageSharp.fluid,\n    breadcrumbs,\n  }\n\n  return (\n    <Layout>\n      <SEO title={title} description={description} />\n      <BannerDestination data={bannerData} />\n      <div className=\"content-with-sidebar common-spacing content-left\">\n        <div className=\"container\">\n          <div id=\"two-columns\" className=\"row\">\n            <div id=\"content\" className=\"col-sm-8 col-md-9\">\n              <div className=\"blog-holder\">\n                <div className=\"blog-list list-view\">\n                  {postEdges.map(({ node: { id, frontmatter } }) => (\n                    <PostThumbnail\n                      key={id}\n                      data={{\n                        siteUrl,\n                        postTitle: frontmatter.title,\n                        slug: frontmatter.slug,\n                        introduction: frontmatter.introduction,\n                        date: frontmatter.date,\n                        image: frontmatter.blogListingImage.image,\n                        tags: frontmatter.tags,\n                        allTags: pageContext.tags,\n                      }}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n            <BlogSidebar tags={pageContext.tags} />\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogPage\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      siteUrl: string\n    }\n  }\n  markdownRemark: {\n    frontmatter: {\n      meta: {\n        title: string\n        description: string\n      }\n      banner: {\n        heading: string\n        subHeading: string\n        image: ImageSharp\n      }\n    }\n  }\n  posts: {\n    edges: {\n      node: {\n        id: string\n        frontmatter: {\n          title: string\n          date: string\n          slug: string\n          introduction: string\n          blogListingImage: {\n            alt: string\n            image: ImageSharp\n          }\n          tags: string[]\n        }\n      }\n    }[]\n  }\n}\nexport const query = graphql`\n  query BlogPage {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n    markdownRemark(frontmatter: { templateKey: { eq: \"blog-page\" } }) {\n      frontmatter {\n        meta {\n          title\n          description\n        }\n        banner {\n          heading\n          subHeading\n          image {\n            childImageSharp {\n              fluid(maxWidth: 1920) {\n                ...GatsbyImageSharpFluid_withWebp\n              }\n            }\n            publicURL\n          }\n        }\n      }\n    }\n    posts: allMarkdownRemark(\n      filter: { frontmatter: { templateKey: { eq: \"post-page\" } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            slug\n            date(formatString: \"MMM DD, YYYY\")\n            introduction\n            blogListingImage {\n              alt\n              image {\n                childImageSharp {\n                  fluid(maxWidth: 400) {\n                    ...GatsbyImageSharpFluid_withWebp\n                  }\n                }\n                publicURL\n              }\n            }\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport { ImageSharp } from '../../types'\nimport { processText } from '../../utils/helpers'\nimport SocialSharer from '../social-sharer'\nimport Image from '../image'\n\ninterface PostThumbnailData {\n  siteUrl: string\n  postTitle: string\n  slug: string\n  introduction: string\n  date: string\n  image: ImageSharp\n  tags: string[]\n  allTags: { [key: string]: { count: number; slug: string } }\n}\n\ninterface PostThumbnailProps {\n  data: PostThumbnailData\n}\n\nconst PostThumbnail = ({\n  data: { siteUrl, postTitle, slug, date, introduction, image, tags, allTags },\n}: PostThumbnailProps) => {\n  const postLink = `/blog/${slug}/`\n  return (\n    <article className=\"article blog-article\">\n      <div className=\"thumbnail\">\n        <div className=\"img-wrap\">\n          {image && image.childImageSharp ? (\n            <Link to={postLink}>\n              <Image image={image} alt={postTitle} />\n            </Link>\n          ) : null}\n        </div>\n        <div className=\"description\">\n          <header className=\"heading\">\n            <h3>\n              <Link to={postLink}>{postTitle}</Link>\n            </h3>\n            <time className=\"info-day\">{date}</time>\n          </header>\n          <p>{processText(introduction)}</p>\n          <footer className=\"meta\">\n            <div className=\"link-view\">\n              <Link to={postLink}>VIEW POST</Link>\n            </div>\n            <SocialSharer\n              data={{\n                siteUrl,\n                tourLink: postLink,\n                tourName: postTitle,\n                shortDescription: introduction,\n              }}\n            />\n          </footer>\n          <div className=\"thumbnail__tags\">\n            {tags.map((tag, index) => (\n              <span key={index} className=\"thumbnail__tag\">\n                <Link to={allTags[tag].slug}>\n                  <em>{tag}</em>\n                </Link>\n                {tags.length > 1 && index < tags.length - 1 ? (\n                  <span>&nbsp;&nbsp;&sdot;&nbsp;&nbsp;</span>\n                ) : null}\n              </span>\n            ))}\n          </div>\n        </div>\n      </div>\n    </article>\n  )\n}\nexport default PostThumbnail\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/templates/destination-activity-page.tsx","webpack:///./src/components/activity-intro/activity-intro.tsx","webpack:///./src/components/social-sharer/social-sharer.tsx","webpack:///./src/components/breadcrumbs/breadcrumbs.tsx","webpack:///./src/components/banner-activity/banner-activity.tsx","webpack:///./src/components/taylor-made-card/taylor-made-card.tsx","webpack:///./src/components/featured-tour/featured-tour.tsx","webpack:///./src/components/featured-tours/featured-tours.tsx"],"names":["DestinationActivityPage","data","markdownRemark","frontmatter","meta","title","activity","filter","banner","intro","featuredToursSection","taylorMadeSection","tours","breadcrumbs","id","name","href","bannerData","heading","subHeading","heroImage","image","childImageSharp","fluid","featuredTours","useMemo","edges","map","node","gridFeaturedTours","length","gridTaylorMadeSection","options","pageClassName","description","grid","activityFilter","className","index","key","first","last","ActivityIntro","text","inset","link","destination","paragraph","i","dangerouslySetInnerHTML","__html","src","publicURL","alt","height","width","icon","bestSeason","locations","SocialSharer","siteUrl","tourLink","tourName","shortDescription","emailLink","fullUrl","socialSharers","facebook","twitter","linkedin","pinterest","target","rel","Breadcrumbs","to","BannerActivity","data-stellar-background-ratio","reducer","state","action","maxWidth","widths","totalMeasurements","type","payload","TaylorMadeCard","subTitle","descriptionInParagraphs","link2","useReducer","dispatch","updateWidths","div","clientWidth","processText","ref","style","display","flex","FeaturedTour","subtitle","duration","slug","useStaticQuery","site","siteMetadata","code","activityListing","find","activities","reduce","acc","cur","activityName","listing","destinationName","FeaturedTours"],"mappings":"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","file":"component---src-templates-destination-activity-page-tsx-1049233badb59edd98b0.js","sourcesContent":["import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\n\nimport { ImageSharp } from '../types'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport BannerActivity, {\n  BannerActivityData,\n} from '../components/banner-activity'\nimport ActivityIntro, { ActivityIntroData } from '../components/activity-intro'\nimport FeaturedTours from '../components/featured-tours'\nimport { FeaturedTourInterface } from '../components/featured-tour'\nimport RecentlyViews from '../components/recently-views'\nimport TaylorMadeCard, {\n  TaylorMadeCardInterface,\n} from '../components/taylor-made-card'\n\ninterface DestinationActivityPageProps {\n  readonly data: PageQueryData\n}\n\nconst DestinationActivityPage = ({\n  data: {\n    markdownRemark: {\n      frontmatter: {\n        meta,\n        title,\n        filter: { activity },\n        banner,\n        intro,\n        featuredToursSection,\n        taylorMadeSection,\n      },\n    },\n    tours,\n  },\n}: DestinationActivityPageProps) => {\n  const breadcrumbs: Breadcrumbs = [\n    { id: '1', name: 'home', href: '/' },\n    { id: '2', name: 'destination-activity', href: '' },\n    { id: '3', name: title, href: '' },\n  ]\n  const bannerData: BannerActivityData = {\n    heading: banner.heading,\n    subHeading: banner.subHeading,\n    heroImage: banner.image.childImageSharp.fluid,\n    breadcrumbs,\n  }\n  const featuredTours = useMemo(\n    () =>\n      tours.edges.map(({ node: { id, frontmatter } }) => ({ id, frontmatter })),\n    [tours],\n  )\n  let gridFeaturedTours = ''\n  if (featuredTours.length !== 3 && featuredTours.length < 5) {\n    gridFeaturedTours = 'grid-2'\n  }\n  let gridTaylorMadeSection = ''\n  if (taylorMadeSection && taylorMadeSection.options.length > 2) {\n    gridTaylorMadeSection = 'grid-2'\n  }\n  return (\n    <Layout pageClassName=\"activity-page\">\n      <SEO title={meta.title} description={meta.description} />\n      <BannerActivity data={bannerData} />\n      <ActivityIntro data={intro} />\n      <FeaturedTours\n        data={{\n          heading: featuredToursSection.heading,\n          subHeading: featuredToursSection.subHeading,\n          grid: gridFeaturedTours,\n          activityFilter: activity,\n          featuredTours,\n        }}\n      />\n      {taylorMadeSection && taylorMadeSection.options.length > 0 && (\n        <article\n          className={`activity-page__taylor-made-section content-block article-boxed`}\n        >\n          <div className=\"container\">\n            <header className=\"content-heading\">\n              <h2 className=\"main-heading\">{taylorMadeSection.heading}</h2>\n              <span className=\"main-subtitle\">\n                {taylorMadeSection.subHeading}\n              </span>\n              {/* <div className=\"seperator\" /> */}\n            </header>\n            <div\n              className={`activity-page__taylor-made-wrapper${\n                gridTaylorMadeSection ? ` ${gridTaylorMadeSection}` : ''\n              }`}\n            >\n              {taylorMadeSection.options.map((data, index) => (\n                <TaylorMadeCard\n                  key={index}\n                  data={data}\n                  first={index === 0}\n                  last={index === taylorMadeSection.options.length - 1}\n                />\n              ))}\n            </div>\n          </div>\n        </article>\n      )}\n      <RecentlyViews />\n    </Layout>\n  )\n}\n\nexport default DestinationActivityPage\n\ninterface PageQueryData {\n  markdownRemark: {\n    frontmatter: {\n      meta: {\n        title: string\n        description: string\n      }\n      title: string\n      filter: {\n        destination: string\n        activity: string\n      }\n      banner: {\n        heading: string\n        subHeading: string\n        image: ImageSharp\n      }\n      intro: ActivityIntroData\n      featuredToursSection: {\n        heading: string\n        subHeading: string\n      }\n      taylorMadeSection: {\n        heading: string\n        subHeading: string\n        options: TaylorMadeCardInterface[]\n      }\n    }\n  }\n  tours: {\n    edges: {\n      node: {\n        id: string\n        frontmatter: FeaturedTourInterface\n      }\n    }[]\n  }\n}\n\nexport const query = graphql`\n  query DestinationActivityPage(\n    $id: String!\n    $activity: String!\n    $destination: String!\n  ) {\n    markdownRemark(id: { eq: $id }) {\n      id\n      frontmatter {\n        meta {\n          title\n          description\n        }\n        title\n        filter {\n          destination\n          activity\n        }\n        banner {\n          heading\n          subHeading\n          image {\n            childImageSharp {\n              fluid(maxWidth: 1920) {\n                ...GatsbyImageSharpFluid_withWebp\n              }\n            }\n            publicURL\n          }\n        }\n        intro {\n          heading\n          text\n          inset {\n            bestSeason\n            locations\n            image {\n              publicURL\n            }\n            icon\n          }\n          link {\n            href\n            text\n          }\n        }\n        featuredToursSection {\n          heading\n          subHeading\n        }\n        taylorMadeSection {\n          heading\n          subHeading\n          options {\n            image {\n              childImageSharp {\n                fluid(maxWidth: 500, maxHeight: 291, quality: 70) {\n                  ...GatsbyImageSharpFluid_withWebp\n                }\n              }\n              publicURL\n            }\n            title\n            subTitle\n            description\n            link {\n              href\n              text\n            }\n          }\n        }\n      }\n    }\n    tours: allMarkdownRemark(\n      filter: {\n        frontmatter: {\n          templateKey: { eq: \"tour-page\" }\n          activity: {\n            elemMatch: { name: { frontmatter: { code: { eq: $activity } } } }\n          }\n          destination: { frontmatter: { code: { eq: $destination } } }\n        }\n      }\n      sort: { fields: [frontmatter___destinationTour___order], order: ASC }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            meta {\n              description\n            }\n            slug\n            tourName\n            duration\n            destination {\n              frontmatter {\n                code\n                destinationName\n              }\n            }\n            activity {\n              name {\n                frontmatter {\n                  code\n                  activityName\n                }\n              }\n              featured\n              listing {\n                title\n                subtitle\n                tagline\n                image {\n                  childImageSharp {\n                    fluid(maxWidth: 500, maxHeight: 291, quality: 70) {\n                      ...GatsbyImageSharpFluid_withWebp\n                    }\n                  }\n                  publicURL\n                }\n                description\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport UniversalLink from '../universal-link'\n\nexport interface ActivityIntroData {\n  heading: string\n  text: string[]\n  inset: {\n    bestSeason: string\n    locations: string\n    image?: {\n      publicURL: string\n    }\n    icon?: string\n  }\n  link?: {\n    href: string\n    text: string\n  }\n}\n\ninterface ActiviyIntroProps {\n  data: ActivityIntroData\n  destination?: boolean\n}\n\nconst ActivityIntro = ({\n  data: { heading, text, inset, link },\n  destination = false,\n}: ActiviyIntroProps) => (\n  <div className=\"activity-intro content-intro\">\n    <div className=\"container\">\n      <div className=\"row activity-intro__row\">\n        <div className=\"col-sm-8 col-md-9 text-holder\">\n          <h2 className=\"title-heading\">{heading}</h2>\n          {text.map((paragraph, i) => (\n            <p key={i} dangerouslySetInnerHTML={{ __html: paragraph }} />\n          ))}\n          {link && link.href && link.text && (\n            <div className=\"btn-holder\">\n              <UniversalLink\n                href={link.href}\n                className=\"btn btn-info-sub btn-md btn-shadow radius\"\n              >\n                {link.text}\n              </UniversalLink>\n            </div>\n          )}\n        </div>\n        {inset && (\n          <div className=\"col-sm-4 col-md-3 map-col\">\n            <div className=\"holder\">\n              {!destination && (\n                <div className=\"map-holder\">\n                  {inset.image && (\n                    <img\n                      src={inset.image.publicURL}\n                      alt={heading}\n                      height=\"200\"\n                      width=\"200\"\n                    />\n                  )}\n                  {inset.icon && (\n                    <span className=\"info icon\">\n                      <span className={inset.icon} />\n                    </span>\n                  )}\n                </div>\n              )}\n              {(inset.bestSeason || inset.locations) && (\n                <div className=\"info\">\n                  {inset.bestSeason && (\n                    <div className=\"slot\">\n                      <strong>Best Season:</strong>{' '}\n                      <span className=\"sub\">{inset.bestSeason}</span>{' '}\n                    </div>\n                  )}\n                  {inset.locations && (\n                    <div className=\"slot\">\n                      <strong>Popular Locations:</strong>\n                      <span className=\"sub\">{inset.locations}</span>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  </div>\n)\n\nexport default ActivityIntro\n","import React from 'react'\n\nimport { socialSharers } from '../../utils/helpers'\n\nexport interface SocialSharerData {\n  siteUrl: string\n  tourLink: string\n  tourName: string\n  shortDescription: string\n  emailLink?: string\n}\ninterface SocialSharerProps {\n  data: SocialSharerData\n}\nconst SocialSharer = ({\n  data: { siteUrl, tourLink, tourName, shortDescription, emailLink },\n}: SocialSharerProps) => {\n  const fullUrl = `${siteUrl}${tourLink}`\n  const { facebook, twitter, linkedin, pinterest } = socialSharers(\n    fullUrl,\n    tourName,\n    shortDescription,\n  )\n\n  return (\n    <ul className=\"social-networks\">\n      <li>\n        <a href={twitter} target=\"_blank\" rel=\"noreferrer\">\n          <span className=\"icon-twitter\"></span>\n        </a>\n        <br />\n      </li>\n      <li>\n        <a href={facebook} target=\"_blank\" rel=\"noreferrer\">\n          <span className=\"icon-facebook\"></span>\n        </a>\n        <br />\n      </li>\n      <li>\n        <a href={linkedin} target=\"_blank\" rel=\"noreferrer\">\n          <span className=\"icon-linkedin\"></span>\n        </a>\n        <br />\n      </li>\n      <li>\n        <a href={pinterest} target=\"_blank\" rel=\"noreferrer\">\n          <span className=\"icon-pin\"></span>\n        </a>\n        <br />\n      </li>\n      {emailLink && (\n        <li className=\"social-networks__email\">\n          <a href={emailLink} rel=\"noreferrer\">\n            <span className=\"icon-email\"></span>\n          </a>\n          <br />\n        </li>\n      )}\n    </ul>\n  )\n}\nexport default SocialSharer\n","import React from 'react'\nimport { Link } from 'gatsby'\n\ninterface BreadcrumbsProps {\n  breadcrumbs: Breadcrumbs\n}\n\nconst Breadcrumbs = ({ breadcrumbs }: BreadcrumbsProps) => (\n  <nav className=\"breadcrumbs\">\n    <ul>\n      {breadcrumbs.map(({ id, name, href }) => (\n        <li key={id}>\n          {href ? <Link to={href}>{name}</Link> : <span>{name}</span>}\n        </li>\n      ))}\n    </ul>\n  </nav>\n)\nexport default Breadcrumbs\n","import React from 'react'\nimport Img, { FluidObject } from 'gatsby-image'\n\nimport Breadcrumbs from '../breadcrumbs'\n\nexport interface BannerActivityData {\n  heading: string\n  subHeading: string\n  breadcrumbs: Breadcrumbs\n  heroImage?: FluidObject | null\n}\n\ninterface BannerActivityProps {\n  data: BannerActivityData\n}\n\nconst BannerActivity = ({\n  data: { heading, subHeading, heroImage, breadcrumbs },\n}: BannerActivityProps) => (\n  <section\n    className=\"banner banner-inner parallax\"\n    data-stellar-background-ratio=\"0.5\"\n  >\n    {heroImage ? (\n      <div className=\"banner-image\">\n        <div className=\"has-overlay has-overlay-dark full-height\">\n          {heroImage && <Img fluid={heroImage} />}\n        </div>\n      </div>\n    ) : null}\n    <div className=\"banner-text\">\n      <div className=\"center-text text-center\">\n        <div className=\"container\">\n          <h1>{heading}</h1>\n          <strong className=\"subtitle\">{subHeading}</strong>\n          <Breadcrumbs breadcrumbs={breadcrumbs} />\n        </div>\n      </div>\n    </div>\n  </section>\n)\n\nexport default BannerActivity\n","import React, { useReducer } from 'react'\n\nimport { ImageSharp } from '../../types'\nimport { processText } from '../../utils/helpers'\nimport UniversalLink from '../universal-link'\nimport Image from '../image'\n\ninterface State {\n  maxWidth: number\n  widths: number[]\n  totalMeasurements: number\n}\n\ninterface Action {\n  type: string\n  payload: {\n    index: number\n    width: number\n  }\n}\nconst reducer = (state: State, action: Action) => {\n  const { maxWidth, widths, totalMeasurements } = state\n  const { type, payload } = action\n  const { index, width } = payload\n  switch (type) {\n    case 'add':\n      if (!widths[index] || width > widths[index]) {\n        widths[index] = width\n        return {\n          maxWidth: width > maxWidth ? width : maxWidth,\n          widths,\n          totalMeasurements: width ? totalMeasurements + 1 : totalMeasurements,\n        }\n      }\n      return state\n    default:\n      throw state\n  }\n}\n\nexport interface TaylorMadeCardInterface {\n  image: ImageSharp\n  title: string\n  subTitle?: string\n  description?: string\n  descriptionInParagraphs?: string[]\n  link?: {\n    href: string\n    text: string\n  }\n  link2?: {\n    href: string\n    text: string\n  }\n}\n\ninterface TaylorMadeCardProps {\n  data: TaylorMadeCardInterface\n  first: boolean\n  last: boolean\n}\n\nconst TaylorMadeCard = ({\n  data: {\n    image,\n    title,\n    subTitle,\n    description,\n    descriptionInParagraphs,\n    link,\n    link2,\n  },\n  first,\n  last,\n}: TaylorMadeCardProps) => {\n  const initialState: State = {\n    maxWidth: 0,\n    widths: [0, 0],\n    totalMeasurements: 0,\n  }\n\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const updateWidths = (index: number, div: HTMLDivElement) =>\n    div.clientWidth &&\n    div.clientWidth > state.widths[index] &&\n    dispatch({\n      type: 'add',\n      payload: { index, width: div.clientWidth },\n    })\n  return (\n    <article\n      className={`taylor-made-card__wrapper${first ? ' first' : ''}${\n        last ? ' last' : ''\n      }`}\n    >\n      <div className=\"taylor-made-card__img-wrap\">\n        {image && image.childImageSharp ? (\n          <Image image={image} alt={title} />\n        ) : null}\n      </div>\n      <div className=\"taylor-made-card__textblock\">\n        {title && <h3 className=\"taylor-made-card__title\">{title}</h3>}\n        {subTitle && <p className=\"taylor-made-card__subTitle\">{subTitle}</p>}\n\n        {description && (\n          <p className=\"taylor-made-card__description\">\n            {processText(description)}\n          </p>\n        )}\n        {descriptionInParagraphs &&\n          descriptionInParagraphs.map((paragraph) => (\n            <p className=\"taylor-made-card__description\">\n              {processText(paragraph)}\n            </p>\n          ))}\n        <div className=\"taylor-made-card__buttons-wrapper\">\n          {link && (\n            <div\n              ref={(div) => div && updateWidths(0, div)}\n              style={\n                state.totalMeasurements >= 2\n                  ? { display: 'flex', width: `${state.maxWidth}px` }\n                  : {}\n              }\n            >\n              <UniversalLink\n                href={link.href}\n                className=\"btn btn-default featured-explore-button\"\n                style={{ flex: '1 0 auto' }}\n              >\n                {link.text}\n              </UniversalLink>\n            </div>\n          )}\n          {link2 && (\n            <div\n              ref={(div) => div && updateWidths(1, div)}\n              style={\n                state.totalMeasurements >= 2\n                  ? { display: 'flex', width: `${state.maxWidth}px` }\n                  : {}\n              }\n            >\n              <UniversalLink\n                href={link2.href}\n                className=\"btn btn-default featured-explore-button featured-explore-button--extra\"\n                style={{ flex: '1 0 auto' }}\n              >\n                {link2.text}\n              </UniversalLink>\n            </div>\n          )}\n        </div>\n      </div>\n    </article>\n  )\n}\nexport default TaylorMadeCard\n","import React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\n\nimport { ImageSharp, Reference } from '../../types'\nimport { processText } from '../../utils/helpers'\nimport SocialSharer from '../social-sharer'\nimport Image from '../image'\n\nexport interface FeaturedTourInterface {\n  meta: {\n    description: string\n  }\n  slug: string\n  tourName: string\n  duration?: string\n  destination: Reference\n  activity: {\n    name: Reference\n    featured: number\n    listing: {\n      title?: string\n      subtitle?: string\n      image: ImageSharp\n      description: string\n    }\n  }[]\n}\n\ninterface FeaturedTourProps {\n  data: FeaturedTourInterface\n  activityFilter: string\n}\n\nconst FeaturedTour = ({\n  data: { tourName, duration = '', slug, meta, destination, activity },\n  activityFilter,\n}: FeaturedTourProps) => {\n  const {\n    site: {\n      siteMetadata: { siteUrl },\n    },\n  } = useStaticQuery(graphql`\n    query FeaturedTours {\n      site {\n        siteMetadata {\n          siteUrl\n        }\n      }\n    }\n  `)\n  const tourLink = `/${destination.frontmatter.code}/${activity[0].name.frontmatter.code}/${slug}`\n  const activityListing = activity.find(\n    ({ name }) => name.frontmatter.code === activityFilter,\n  )\n  const activities = activity.reduce((acc, cur, i) => {\n    if (i === 0) {\n      return cur.name.frontmatter.activityName\n    } else {\n      return acc + ', ' + cur.name.frontmatter.activityName\n    }\n  }, '')\n  let image, title, subtitle, description\n  if (activityListing && activityListing.listing) {\n    image = activityListing.listing.image\n    title = activityListing.listing.title\n    subtitle = activityListing.listing.subtitle\n    description = activityListing.listing.description\n  }\n  return (\n    <article className=\"col-xs-12 col-sm-6 col-md-4 article has-hover-s1\">\n      <div className=\"thumbnail\">\n        <div className=\"img-wrap\">\n          {image && image.childImageSharp ? (\n            <Image image={image} alt={tourName} />\n          ) : null}\n        </div>\n        <h3 className=\"small-space\">\n          <Link to={tourLink}>{title || tourName}</Link>\n        </h3>\n        {subtitle && <span className=\"info\">{subtitle}</span>}\n        <aside className=\"meta\">\n          {duration && (\n            <span className=\"duration\">\n              <span className=\"ico-clock ux\"></span>\n              {duration}\n            </span>\n          )}\n          <span className=\"country\">\n            <span className=\"icon-world\"></span>\n            {destination.frontmatter.destinationName}\n          </span>\n          <span className=\"activity\">\n            <span className=\"icon-acitivities\"> </span>\n            {activities}\n          </span>\n        </aside>\n        <p>{processText(description)}</p>\n        <Link to={tourLink} className=\"btn btn-default featured-explore-button\">\n          explore\n        </Link>\n        <footer>\n          <SocialSharer\n            data={{\n              siteUrl,\n              tourLink,\n              tourName,\n              shortDescription: meta.description,\n            }}\n          />\n        </footer>\n      </div>\n    </article>\n  )\n}\nexport default FeaturedTour\n","import React from 'react'\n\nimport FeaturedTour, { FeaturedTourInterface } from '../featured-tour'\n\ninterface FeaturedToursData {\n  heading: string\n  subHeading: string\n  grid?: string\n  activityFilter: string\n  featuredTours: {\n    id: string\n    frontmatter: FeaturedTourInterface\n  }[]\n}\n\ninterface FeaturedToursProps {\n  data: FeaturedToursData\n  className?: string\n  style?: React.CSSProperties\n}\n\nconst FeaturedTours = ({\n  data: { heading, subHeading, grid = '', activityFilter, featuredTours },\n  className,\n  style,\n}: FeaturedToursProps) => {\n  return (\n    <article\n      className={`content-block article-boxed featured-tours${\n        className ? ` ${className}` : ''\n      }`}\n      style={style}\n    >\n      <div className=\"container\">\n        <header className=\"content-heading\">\n          <h2 className=\"main-heading\">{heading}</h2>\n          <span className=\"main-subtitle\">{subHeading}</span>\n          {/* <div className=\"seperator\" /> */}\n        </header>\n        <div className=\"content-holder content-boxed\">\n          <div\n            className={`row db-3-col featured-tour-row${\n              grid ? ` ${grid}` : ''\n            }`}\n          >\n            {featuredTours.map(({ id, frontmatter }) => {\n              return (\n                <FeaturedTour\n                  key={id}\n                  data={frontmatter}\n                  activityFilter={activityFilter}\n                />\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    </article>\n  )\n}\nexport default FeaturedTours\n"],"sourceRoot":""}